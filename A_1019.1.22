1.22---js八种继承方法
  1.原型链继承，每个构造函数都有个原型对象，原型对象有个指向构造函数的指针，实例也有个指向原型对象的指针
    继承就是复制，重写原型对象
    SubType.prototype = new SuperType();
    原型链方案存在的缺点：多个实例对引用类型的操作会被篡改。

  2.原型式继承
    利用一个空对象为中介，直接将某个对象赋值给空对象构造函数的原型
    function object(object){
      function  f(){}
      f.prototype = object
      return new f()
    }
    缺点：无法传递参数，属于浅复制，原型链继承多个实例的引用类型属性指向相同，存在篡改可能
    
  3.ES6-extends类继承
    一个类只能有一个构造函数，默认是constructor
    
 1.23---call,apply，改变this的指向
    区别是call接受的是若干个参数的列表
    apply接受的是多个对象的数组
    var func = function(arg1, arg2) {
         ...
    };
    func.cal(this,arg1,arg2)
    func.apply(this,[arg1,arg2])
    
    1数组合并,Array.prototype.push.apply(arr1,arr2) //将第二个数组添加到第一个，当添加数组过多时会异常或丢失
    2数组最大值最小值，Math.max.apply(Math,numbers),Math.max.call(Math,1,2,3),Math.max.call(Math,...numbers)
    3Array.prototype.slice.call(domNodes),Array.from(),将类数组转换为数组
      类数组：具有对象元素的数字索引下标和length属性，不能进行push，shift，indexOf，forEach等对象方法
      兼容ie，ie9以下dom对象是以com对象实现的，js对象与com对象bb不能呼唤
      function toArray(nodes){
            try {
                // works in every browser except IE
                return Array.prototype.slice.call(nodes);
            } catch(err) {
                // Fails in IE < 9
                var arr = [],
                    length = nodes.length;
                for(var i = 0; i < length; i++){
                    // arr.push(nodes[i]); // 两种都可以
                    arr[i] = nodes[i];
                }
                return arr;
            }
        }
      4.调用父构造函数实现继承
        function  SuperType(){
            this.color=["red", "green", "blue"];
        }
        function  SubType(){
            // 核心代码，继承自SuperType
            SuperType.call(this);
        }
      5.Array.prototype.push.apply(arr1,arr2);    //得到合并后数组的长度，因为push就是返回一个数组的长度
      6.严格模式下use strict，this默认为undefined，普通模式下为window

 1.23---js事件委托和代理
        事件委托就是利用事件冒泡，只指定一个事件处理程序，添加到页面的事件处理程序会影响整体运行性能，与dom节点交互会导致浏览器的重绘和重排
        event对象有一个target对象，可以返回事件的目标节点，成为事件源，标准浏览器为ev.target，ie为event.srcElement，获取当前节点nodeName然后toLowerCase
        window.onload = function(){
		    　　var oUl = document.getElementById("ul1");
		    　　oUl.onclick = function(ev){
		    	　　　　var ev = ev || window.event;
		   		　　　　var target = ev.target || ev.srcElement;
		        　　　　if(target.nodeName.toLowerCase() == 'li'){
		        　 　　　　　　	alert(123);
		　　　　　　　  alert(target.innerHTML);
                }
              }
        }
        

1.23---bind,live，delegate,on 前俩者jq1.7/1.9就不用了
单事件 $("").bind("click",data,function);
多事件$("").bind("click dbclick mouseout",data,function);$("").bind({event1:function, event2:function, ...})
bind绑定当前元素，重复注册
live绑定document跟元素注册一次，但层级太深会影响性能
delegate类型live但是绑定指定元素，注册一次，附加操作前期完成会造成页面加载时性能问题，bind方法不能直接升级到delegate
on使各种事件绑定一致，支持bind方法，
$(...).事件名(function(e){})

1.23---event loop
也叫message loop 消息循环/事件循环 是一种等待消息和分配的结构
消息源在新消息到达后将阻塞中的消息泵（消息循环所在的线程)唤醒，使之工作
单线程，浏览器脚本语言，在某一时刻内只能执行特定的一个任务，并且会阻塞其它任务执行
事件循环包括宏任务循环和微任务循环
宏任务：创建文档对象，解析html，更改url及各种事件，执行主栈js
微任务：promise，回调函数，dom变化，更新引用程序的状态变化，
在一次循环中，最多处理一个宏任务，而微任务队列中所有的微任务都会被处理。
所有微任务都会在下一次渲染前完成，目的是在渲染前更新应用程序状态。

heap（堆）是用户主动请求而划分出来的内存区域，比如你new Object()，就是将一个对象存入堆中，可以理解为heap存对象。
stack（栈）是由于函数运行而临时占用的内存区域，函数都存放在栈里。
	
1.23---history对象
window.history.back()
window.history.go()
window.history.forward()
这三者会触动h5的history.popState()
history.replaceState() 替换history对象里当前的历史对象
history.pushState()  在history对象里加一个新的历史记录，压栈
onhashchaneg()监听客户端前进后退事件，监听hash变化
history.replaceState({page: 3}, "title 3", "?page=3"); //修改当前激活的历史记录条目 http://ex..?page=2 变为 http://ex..?page=3,条目索引为3

前端路由
hash就是url后#后的字母，与css的#一致
window.location.hash = 'qq' // 设置 url 的 hash，会在当前url后加上 '#qq'
var hash = window.location.hash // '#qq'  
window.addEventListener('hashchange', function(){ 
    // 监听hash变化，点击浏览器的前进后退会触发
})

1.23---浏览器渲染原理和流程
浏览器渲染引擎主要是显示应用了css的html和图片
解析html构建dom树，构建render树，布局render树，绘制render树
浏览器就cssdom和dom合并生成render树
reflow回流，浏览器发现某些部分发生了变化，需要倒回去重新渲染，主要是尺寸方面
repaint重绘，改变某个元素的颜色文字颜色边框颜色等，屏幕的一部分要重绘，但尺寸不变
(1)display:none 的节点不会被加入Render Tree，而visibility: hidden 则会，所以，如果某个节点最开始是不显示的，设为display:none是更优的。
(2)display:none 会触发 reflow，而 visibility:hidden 只会触发 repaint，因为没有发现位置变化。
(3)有些情况下，比如修改了元素的样式，浏览器并不会立刻reflow 或 repaint 一次，而是会把这样的操作积攒一批，然后做一次 reflow，这又叫异步 reflow 或增量异步 reflow

1.23---浏览器缓存
浏览器把一个请求过的web资源拷贝一份存储在浏览器中，再次访问时如果相同的url，缓存会根据缓存机制是否适用副本响应请求
减少网络带宽消耗
减少网络延迟，加快页面打开速度
减少请求降低服务器压力
缓存规则：在http协议头和html的meta标签，通过新鲜度和校验值来判断
新鲜度，过期机制：1.含有完整的过期时间控制信息头（http协议头）并在有效期内，2.浏览器已经使用过这个缓存副本，并且检查过新鲜度
校验值，校验机制：服务起返回资源有时会在控制消息头上添加etag，entity tag，通过比较是否变化

<meta http-equiv="Pragma" content="no-cache">  







	




	
