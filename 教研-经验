数组匹配
     this.ruleForm.answers.forEach((item,index)=>{
          let reg  = new RegExp(`__${item.number}__`);
          console.log(reg)
          var a = this.ruleForm.question.questionContent.match(reg);
          if(!reg.test(this.ruleForm.question.questionContent.match(reg))){
                 this.ruleForm.answers.splice(index, 1); 
          }                                                                                                             
       })
  
  
 element-ui的树形图
 
     <el-tree :data="data" :props="defaultProps" @node-click="handleNodeClick" lazy :load='loadNode' style='margin-top: 10px'></el-tree>
     //

         动态加载lazy参数和load方法是必选的,
         lazy:为节点store（TreeStore）中的属性，可输出当前节点进行查看
         load：加载子数据的方法，用法为function(node,reslove){}

     data(){
       return{
         defaultProps: {
           //配置父子树的属性名
           children: 'children',
           label: 'label'
         },
         data:[],
       }
     }



     loadNode(node, resolve){
       if (node.level === 0) {
         //初始第一层节点，初始化数据，根节点配置
         return resolve([{ label: this.chooseData.kpName,id: this.chooseData.id}]);
         // 加入id，label可能会重名
       }
       var data = [];
       if(node.data.id == this.chooseData.id){
       //点击树节点1的处理
         for(let i = 0 ;i < this.chooseData.oneKpTreeVOs.length;i++){
           data.push({'label':'','id':''})
           data[i].label = this.chooseData.oneKpTreeVOs[i].kpName
           data[i].id = this.chooseData.oneKpTreeVOs[i].id
         }
       }
       //点击树节点2的处理
       for(let i = 0 ;i < this.chooseData.oneKpTreeVOs.length;i++){
         for(let m = 0 ;m < this.chooseData.oneKpTreeVOs[i].oneKpTreeVOs.length;m++){
           if(node.data.id == this.chooseData.oneKpTreeVOs[i].id){
               data.push({'label':'','id':''})
               data[m].label = this.chooseData.oneKpTreeVOs[i].oneKpTreeVOs[m].kpName
               data[m].id = this.chooseData.oneKpTreeVOs[i].oneKpTreeVOs[m].id
               console.log(1)
           }
         }
       }
       resolve(data)//加载下级数据!
     },
     handleNodeClick(node, resolve){
       this.key = ''
       if(resolve.level == 1){
         this.treeId = this.chooseData.id
       }else{
         this.treeId = node.id
       }
       this.getSearchList()
     },
  
//图片上传
     showpic(){
        var pic = document.querySelector('#pic');
        pic.addEventListener('change', function() {
            var file = this.files[0];                
            // 确认选择的文件是图片                
            if(file.type.indexOf("image") == 0) {
                var reader = new FileReader();
                reader.readAsDataURL(file);                    
                reader.onload = function(e) {
                    // 图片base64化
                    var newUrl = this.result;
                    document.getElementById('img').setAttribute('src',newUrl)
                };
            }
        });
      }, 
      <img src="https://www.baidu.com/img/bd_logo1.png?where=super" alt="" style="width: 100%;cursor: pointer;display: block;" id='img'>
      <input type="file" style="width: 100px;position: absolute;height: 34px;top: 0;opacity: 0;cursor: pointer;" id="pic" @click='showpic()'>

//光标插入
<el-input class='te' type="textarea" id="textarea"  v-model="ruleForm.question.questionContent" @input="onEditorChange($event)"></el-input>
          insertGap(){
              let textObj = document.getElementById('textarea')
              let textFeildValue = `__${this.count++}__`;
                  if (document.all) {
                      if (textObj.createTextRange && textObj.caretPos) {
                          var caretPos = textObj.caretPos;
                          caretPos.text = caretPos.text.charAt(caretPos.text.length - 1) == '   ' ? textFeildValue + '   ' : textFeildValue;
                      } else {
                          textObj.value = textFeildValue;
                      }
                  } else {
                      if (textObj.setSelectionRange) {
                          var rangeStart = textObj.selectionStart;
                          var rangeEnd = textObj.selectionEnd;
                          var tempStr1 = textObj.value.substring(0, rangeStart);
                          var tempStr2 = textObj.value.substring(rangeEnd);
                          textObj.value = tempStr1 + textFeildValue + tempStr2;
                      } else {
                          alert("This   version   of   Mozilla   based   browser   does   not   support   setSelectionRange");
                      }
                  }
                this.ruleForm.question.questionContent = textObj.value
                // this.ruleForm.question.questionContent+=`__${this.count++}__`;
                // this.ruleForm.question.questionContent = this.ruleForm.question.questionContent.replace('<p>','');
                this.ruleForm.answers.push({id:'',answerContent:'',imgId:'',isRight:0,seqNo:'',isShow:false,number:this.number++})
            },

            onEditorChange(val) {
              console.log(val)
              this.ruleForm.answers.forEach((item,index)=>{
                 var reg  = new RegExp(`__${item.number}__`);
                 var a = this.ruleForm.question.questionContent.match(reg);
                 if(!reg.test(this.ruleForm.question.questionContent.match(reg))){
                        this.ruleForm.answers.splice(index, 1); 
                 }                                                                                                             
              })
             })

//富文本下全局的插入

                this.pasteHtmlAtCaret('__'+(this.ruleForm.answers.length+1)+'__',false);
                this.ruleForm.answers.push({id:'',answerContent:'',imgId:'',isRight:1,seqNo:'',isShow:false,number:this.number++});
                
          pasteHtmlAtCaret(html, selectPastedContent) {
                var sel, range;
                if (window.getSelection) {
                    // IE9 and non-IE
                    sel = window.getSelection();
                    if (sel.getRangeAt && sel.rangeCount) {
                        range = sel.getRangeAt(0);
                        range.deleteContents();

                        // Range.createContextualFragment() would be useful here but is
                        // only relatively recently standardized and is not supported in
                        // some browsers (IE9, for one)
                        var el = document.createElement("div");
                        el.innerHTML = html;
                        var frag = document.createDocumentFragment(), node, lastNode;
                        while ((node = el.firstChild)) {
                            lastNode = frag.appendChild(node);
                        }
                        var firstNode = frag.firstChild;
                        range.insertNode(frag);

                        // Preserve the selection
                        if (lastNode) {
                            range = range.cloneRange();
                            range.setStartAfter(lastNode);
                            if (selectPastedContent) {
                                range.setStartBefore(firstNode);
                            } else {
                                range.collapse(true);
                            }
                            sel.removeAllRanges();
                            sel.addRange(range);
                        }
                    }
                } else if ((sel = document.selection) && sel.type != "Control") {
                    // IE < 9
                    var originalRange = sel.createRange();
                    originalRange.collapse(true);
                    sel.createRange().pasteHTML(html);
                    if (selectPastedContent) {
                        range = sel.createRange();
                        range.setEndPoint("StartToStart", originalRange);
                        range.select();
                    }
                }
            },

//字符串正则匹配排序
insertGap(){
                this.pasteHtmlAtCaret('__'+(this.ruleForm.answers.length+1)+'__',false)
                this.ruleForm.answers.push({id:'',answerContent:'',imgId:'',isRight:1,seqNo:'',isShow:false,number:this.ruleForm.answers.length+1})
                setTimeout(() => {
                  var reg  = /__\d__/g;
                  var a = this.ruleForm.question.questionContent.match(reg)
                  let splitArr = []
                  let afterStr = ''
                  splitArr = this.ruleForm.question.questionContent.split(reg)
                  if(splitArr){
                    for(var i = 0 ; i < splitArr.length-1;i++){
                      afterStr = afterStr + splitArr[i] + '__'+(i+1)+'__'
                    }
                    this.ruleForm.question.questionContent = afterStr + '</p>'
                    console.log(this.ruleForm.question.questionContent)
                  }
                  for(let i = 0 ; i <  a.length ; i++){
                    this.ruleForm.answers[i].number = i+1
                  }
                },200)
            },
